import numpy as np
import os as os
import sys
import glob as glob # glob.glob I like how this sounds
import pandas as pd
import requests
import pickle
import corner
import emcee
import h5py
import matplotlib.pyplot as plt
#---------------------------------------------------------------
def magnotron_bstat(modB,chi,dof):
    # This is shitty. cvf contains the chi2 cutoff values associated to a probability of 68% for degree of freedomf from 1 to 1000
    # it's the output of: for i = 1, 1000 & chisqr_cvf(0.32,i) in IDL
    cvf = [0.98894668,2.2788696,3.5058815,4.6954231,5.8608041,7.0091705,8.1447868,9.2704201,10.387957,11.498778,12.603903,13.704121,14.800066,15.892229,16.981022,18.066792,19.149826,20.230377,21.308651,22.384815,23.459042,24.531471,25.602226,26.671425,27.739170,28.805523,29.870579,30.934414,31.997124,33.058708,34.119263,35.178833,36.237434,37.295181,38.352043,39.408089,40.463333,41.517838,42.571594,43.624702,44.677101,45.728867,46.780014,47.830536,48.880501,49.929916,50.978775,52.027100,53.074928,54.122261,55.169121,56.215515,57.261482,58.306976,59.352081,60.396744,61.441017,62.484901,63.528381,64.571533,65.614273,66.656662,67.698776,68.740509,69.781906,70.822952,71.863770,72.904236,73.944351,74.984268,76.023819,77.063110,78.102158,79.140915,80.179398,81.217636,82.255630,83.293381,84.330856,85.368134,86.405182,87.441940,88.478531,89.514877,90.550995,91.586929,92.622620,93.658096,94.693390,95.728500,96.763412,97.798111,98.832611,99.866928,100.90112,101.93507,102.96889,104.00246,105.03592,106.06918,107.10229,108.13527,109.16803,110.20065,111.23311,112.26543,113.29758,114.32959,115.36142,116.39311,117.42470,118.45609,119.48735,120.51855,121.54953,122.58044,123.61111,124.64174,125.67218,126.70253,127.73274,128.76282,129.79279,130.82263,131.85245,132.88205,133.91153,134.94089,135.97006,136.99927,138.02823,139.05722,140.08603,141.11475,142.14325,143.17181,144.20013,145.22852,146.25659,147.28470,148.31265,149.34052,150.36838,151.39594,152.42352,153.45102,154.47845,155.50571,156.53293,157.56003,158.58713,159.61398,160.64081,161.66757,162.69427,163.72083,164.74741,165.77371,166.80005,167.82639,168.85248,169.87854,170.90454,171.93051,172.95636,173.98215,175.00784,176.03339,177.05899,178.08438,179.10980,180.13504,181.16034,182.18549,183.21054,184.23560,185.26050,186.28543,187.31021,188.33490,189.35959,190.38419,191.40872,192.43314,193.45761,194.48196,195.50620,196.53043,197.55453,198.57852,199.60260,200.62650,201.65045,202.67422,203.69794,204.72168,205.74530,206.76892,207.79239,208.81589,209.83923,210.86261,211.88583,212.90909,213.93231,214.95541,215.97839,217.00140,218.02438,219.04724,220.07013,221.09283,222.11557,223.13834,224.16095,225.18344,226.20593,227.22842,228.25092,229.27325,230.29553,231.31775,232.33997,233.36212,234.38422,235.40631,236.42834,237.45032,238.47217,239.49405,240.51590,241.53766,242.55942,243.58102,244.60263,245.62427,246.64575,247.66727,248.68875,249.71005,250.73154,251.75278,252.77405,253.79535,254.81644,255.83752,256.85883,257.87976,258.90076,259.92181,260.94275,261.96356,262.98431,264.00525,265.02600,266.04675,267.06738,268.08801,269.10852,270.12921,271.14972,272.17023,273.19067,274.21100,275.23126,276.25171,277.27197,278.29224,279.31244,280.33270,281.35272,282.37292,283.39294,284.41296,285.43292,286.45294,287.47272,288.49268,289.51245,290.53223,291.55200,292.57172,293.59149,294.61127,295.63074,296.65045,297.66998,298.68945,299.70898,300.72852,301.74799,302.76721,303.78674,304.80597,305.82526,306.84454,307.86383,308.88300,309.90204,310.92133,311.94025,312.95953,313.97833,314.99750,316.01654,317.03534,318.05426,319.07306,320.09210,321.11078,322.12958,323.14838,324.16724,325.18585,326.20459,327.22321,328.24182,329.26044,330.27899,331.29736,332.31592,333.33429,334.35272,335.37128,336.38965,337.40802,338.42633,339.44446,340.46289,341.48096,342.49933,343.51746,344.53558,345.55371,346.57184,347.58997,348.60785,349.62598,350.64386,351.66199,352.67987,353.69775,354.71570,355.73352,356.75146,357.76910,358.78699,359.80463,360.82257,361.84015,362.85785,363.87555,364.89319,365.91083,366.92828,367.94592,368.96356,369.98102,370.99841,372.01587,373.03326,374.05072,375.06812,376.08551,377.10291,378.12012,379.13733,380.15472,381.17188,382.18909,383.20630,384.22351,385.24078,386.25775,387.27502,388.29205,389.30902,390.32605,391.34308,392.36005,393.37708,394.39410,395.41107,396.42786,397.44464,398.46161,399.47839,400.49518,401.51196,402.52893,403.54547,404.56226,405.57898,406.59576,407.61230,408.62903,409.64557,410.66235,411.67883,412.69531,413.71185,414.72858,415.74487,416.76141,417.77795,418.79443,419.81073,420.82727,421.84344,422.85999,423.87628,424.89252,425.90881,426.92511,427.94128,428.95758,429.97388,430.99011,432.00610,433.02240,434.03839,435.05463,436.07068,437.08673,438.10297,439.11896,440.13501,441.15100,442.16705,443.18304,444.19879,445.21484,446.23083,447.24658,448.26239,449.27838,450.29413,451.30994,452.32593,453.34167,454.35748,455.37323,456.38898,457.40454,458.42029,459.43604,460.45160,461.46735,462.48285,463.49860,464.51410,465.52960,466.54517,467.56091,468.57642,469.59192,470.60724,471.62274,472.63824,473.65381,474.66901,475.68457,476.69983,477.71533,478.73065,479.74591,480.76135,481.77667,482.79199,483.80725,484.82245,485.83777,486.85284,487.86804,488.88330,489.89850,490.91345,491.92889,492.94403,493.95898,494.97418,495.98907,497.00439,498.01959,499.03448,500.04932,501.06464,502.07935,503.09424,504.10919,505.12427,506.13928,507.15417,508.16882,509.18396,510.19885,511.21387,512.22839,513.24341,514.25806,515.27295,516.28748,517.30249,518.31714,519.33215,520.34668,521.36157,522.37610,523.39062,524.40515,525.42017,526.43469,527.44922,528.46387,529.47827,530.49280,531.50781,532.52234,533.53674,534.55127,535.56580,536.58032,537.59485,538.60925,539.62341,540.63806,541.65247,542.66699,543.68103,544.69556,545.70996,546.72449,547.73865,548.75317,549.76721,550.78174,551.79614,552.81018,553.82471,554.83875,555.85278,556.86731,557.88123,558.89539,559.90991,560.92395,561.93799,562.95203,563.96643,564.98047,565.99451,567.00854,568.02258,569.03662,570.05103,571.06506,572.07910,573.09314,574.10718,575.12073,576.13513,577.14868,578.16272,579.17676,580.19080,581.20483,582.21838,583.23242,584.24634,585.26038,586.27393,587.28796,588.30151,589.31555,590.32947,591.34314,592.35718,593.37061,594.38464,595.39819,596.41174,597.42578,598.43933,599.45276,600.46680,601.48047,602.49390,603.50793,604.52148,605.53491,606.54858,607.56213,608.57605,609.58960,610.60303,611.61658,612.63013,613.64368,614.65723,615.67078,616.68433,617.69775,618.71130,619.72485,620.73792,621.75134,622.76489,623.77832,624.79187,625.80542,626.81848,627.83203,628.84558,629.85852,630.87207,631.88562,632.89868,633.91223,634.92517,635.93872,636.95178,637.96533,638.97839,639.99182,641.00488,642.01843,643.03137,644.04443,645.05798,646.07080,647.08423,648.09729,649.11072,650.12366,651.13672,652.15002,653.16309,654.17603,655.18945,656.20251,657.21533,658.22827,659.24133,660.25476,661.26770,662.28064,663.29370,664.30664,665.31958,666.33252,667.34546,668.35852,669.37146,670.38440,671.39746,672.41040,673.42322,674.43591,675.44922,676.46179,677.47461,678.48767,679.50061,680.51355,681.52612,682.53906,683.55200,684.56458,685.57751,686.59009,687.60303,688.61597,689.62854,690.64148,691.65393,692.66699,693.67944,694.69238,695.70496,696.71741,697.73035,698.74292,699.75586,700.76831,701.78088,702.79333,703.80640,704.81885,705.83130,706.84387,707.85681,708.86926,709.88184,710.89429,711.90674,712.91931,713.93176,714.94470,715.95691,716.96973,717.98181,718.99475,720.00684,721.01929,722.03186,723.04431,724.05688,725.06934,726.08179,727.09436,728.10632,729.11877,730.13147,731.14380,732.15637,733.16833,734.18091,735.19336,736.20544,737.21790,738.23035,739.24243,740.25488,741.26697,742.27954,743.29150,744.30396,745.31604,746.32861,747.34094,748.35315,749.36511,750.37756,751.38965,752.40173,753.41418,754.42615,755.43872,756.45068,757.46265,758.47522,759.48730,760.49939,761.51135,762.52332,763.53589,764.54797,765.55981,766.57202,767.58398,768.59595,769.60840,770.62048,771.63208,772.64453,773.65649,774.66858,775.68066,776.69226,777.70471,778.71667,779.72827,780.74036,781.75232,782.76440,783.77649,784.78845,785.80042,786.81201,787.82410,788.83606,789.84814,790.85962,791.87158,792.88367,793.89526,794.90723,795.91931,796.93127,797.94275,798.95483,799.96692,800.97839,801.99048,803.00195,804.01404,805.02551,806.03760,807.04907,808.06116,809.07275,810.08472,811.09619,812.10828,813.11987,814.13135,815.14343,816.15503,817.16687,818.17847,819.19006,820.20166,821.21362,822.22522,823.23669,824.24866,825.26025,826.27173,827.28333,828.29480,829.30640,830.31836,831.32983,832.34143,833.35291,834.36450,835.37610,836.38757,837.39917,838.41113,839.42224,840.43420,841.44531,842.45691,843.46838,844.48035,845.49182,846.50293,847.51453,848.52600,849.53748,850.54907,851.56067,852.57214,853.58325,854.59473,855.60620,856.61768,857.62927,858.64087,859.65186,860.66345,861.67493,862.68640,863.69739,864.70898,865.72058,866.73157,867.74316,868.75464,869.76562,870.77722,871.78821,872.79980,873.81091,874.82227,875.83386,876.84497,877.85645,878.86755,879.87866,880.89001,881.90161,882.91260,883.92371,884.93518,885.94629,886.95776,887.96875,888.97986,889.99133,891.00244,892.01392,893.02490,894.03589,895.04749,896.05859,897.06958,898.08069,899.09216,900.10315,901.11426,902.12524,903.13635,904.14783,905.15881,906.16992,907.18091,908.19202,909.20312,910.21411,911.22510,912.23657,913.24719,914.25867,915.26978,916.28076,917.29175,918.30273,919.31384,920.32483,921.33594,922.34692,923.35791,924.36902,925.38000,926.39050,927.40161,928.41272,929.42358,930.43469,931.44580,932.45679,933.46741,934.47839,935.48938,936.50037,937.51147,938.52209,939.53308,940.54419,941.55505,942.56567,943.57666,944.58777,945.59827,946.60925,947.62036,948.63123,949.64185,950.65283,951.66345,952.67456,953.68506,954.69604,955.70703,956.71765,957.72864,958.73926,959.75024,960.76074,961.77173,962.78235,963.79297,964.80396,965.81458,966.82556,967.83606,968.84705,969.85767,970.86816,971.87927,972.88977,973.90076,974.91125,975.92175,976.93311,977.94312,978.95422,979.96448,980.97522,981.98596,982.99634,984.00720,985.01843,986.02869,987.03943,988.04980,989.06055,990.07166,991.08167,992.09277,993.10266,994.11377,995.12451,996.13489,997.14587,998.15625,999.16699,1000.1772,1001.1880,1002.1980,1003.2091,1004.2191,1005.2300,1006.2402,1007.2512,1008.2612,1009.2721,1010.2823,1011.2935,1012.3035,1013.3142,1014.3245,1015.3356,1016.3456,1017.3557,1018.3667,1019.3770,1020.3877,1021.3978,1022.4088,1023.4187,1024.4290,1025.4399,1026.4502,1027.4602,1028.4712,1029.4810,1030.4922,1031.5022,1032.5122,1033.5232,1034.5332,1035.5437,1036.5544,1037.5645,1038.5754,1039.5854,1040.5955,1041.6062,1042.6165,1043.6265,1044.6375,1045.6475,1046.6577,1047.6677,1048.6787,1049.6887,1050.6990,1051.7090,1052.7200,1053.7300,1054.7402,1055.7510,1056.7610,1057.7710,1058.7810,1059.7913,1060.8022,1061.8123,1062.8223,1063.8328,1064.8425,1065.8535,1066.8633,1067.8735,1068.8835,1069.8936,1070.9045,1071.9146,1072.9246,1073.9348,1074.9448,1075.9548,1076.9653,1077.9758,1078.9858,1079.9958,1081.0061,1082.0161,1083.0261,1084.0361,1085.0471,1086.0571,1087.0674,1088.0774,1089.0874,1090.0972,1091.1072,1092.1177,1093.1274,1094.1375,1095.1475,1096.1575,1097.1682,1098.1780,1099.1877,1100.1987,1101.2087,1102.2188,1103.2285,1104.2388,1105.2488,1106.2588,1107.2688,1108.2791,1109.2891,1110.2991,1111.3091,1112.3191,1113.3284,1114.3384,1115.3491,1116.3591,1117.3691,1118.3784,1119.3884,1120.3984,1121.4084,1122.4187,1123.4287,1124.4387,1125.4487,1126.4590,1127.4688,1128.4788,1129.4888,1130.4988,1131.5078,1132.5181,1133.5281,1134.5381,1135.5481,1136.5581,1137.5674,1138.5774,1139.5872,1140.5972,1141.6072,1142.6172,1143.6274,1144.6375,1145.6465,1146.6565,1147.6665,1148.6765,1149.6865,1150.6958,1151.7058,1152.7156,1153.7256,1154.7356,1155.7456,1156.7546,1157.7649,1158.7749,1159.7849,1160.7939,1161.8042,1162.8142,1163.8242,1164.8333,1165.8433,1166.8535,1167.8633,1168.8723,1169.8823,1170.8926,1171.9016,1172.9116,1173.9216,1174.9316,1175.9407,1176.9509,1177.9600,1178.9700,1179.9797,1180.9897,1181.9998,1183.0090,1184.0190,1185.0281,1186.0381,1187.0481,1188.0574,1189.0674,1190.0764,1191.0864,1192.0962,1193.1062,1194.1152,1195.1255,1196.1345,1197.1445,1198.1545,1199.1636,1200.1736,1201.1826,1202.1926,1203.2019,1204.2119,1205.2217,1206.2307,1207.2407,1208.2500,1209.2600,1210.2700,1211.2791,1212.2891,1213.2981,1214.3083,1215.3174,1216.3274,1217.3372,1218.3462,1219.3562,1220.3655,1221.3745,1222.3845,1223.3945,1224.4036,1225.4136,1226.4229,1227.4319,1228.4419,1229.4509,1230.4609,1231.4700,1232.4802,1233.4890,1234.4990,1235.5081,1236.5181,1237.5273,1238.5364,1239.5464,1240.5554,1241.5654,1242.5745,1243.5845,1244.5935,1245.6035,1246.6125,1247.6216,1248.6316,1249.6406,1250.6506,1251.6597,1252.6697,1253.6787,1254.6880,1255.6970,1256.7070,1257.7161,1258.7258,1259.7349,1260.7441,1261.7542,1262.7632,1263.7732,1264.7822,1265.7913,1266.8005,1267.8105,1268.8196,1269.8286,1270.8384,1271.8474,1272.8567,1273.8667,1274.8757,1275.8848,1276.8948,1277.9038,1278.9131,1279.9221,1280.9321,1281.9409,1282.9509,1283.9600,1284.9692,1285.9783,1286.9873,1287.9973,1289.0063,1290.0154,1291.0251,1292.0339,1293.0435,1294.0532,1295.0620,1296.0718,1297.0803,1298.0901,1299.0989,1300.1086,1301.1174,1302.1270,1303.1365,1304.1453,1305.1550,1306.1641,1307.1736,1308.1824,1309.1919,1310.2007,1311.2104,1312.2192,1313.2280,1314.2375,1315.2473,1316.2561,1317.2649,1318.2747,1319.2834,1320.2930,1321.3018,1322.3113,1323.3201,1324.3296,1325.3386,1326.3474,1327.3569,1328.3665,1329.3752,1330.3840,1331.3940,1332.4026,1333.4124,1334.4209,1335.4307,1336.4395,1337.4482,1338.4580,1339.4666,1340.4753,1341.4851,1342.4939,1343.5027,1344.5125,1345.5210,1346.5308,1347.5393,1348.5483,1349.5581,1350.5667,1351.5754,1352.5850,1353.5938,1354.6035,1355.6123,1356.6211,1357.6306,1358.6394,1359.6482,1360.6577,1361.6667,1362.6753,1363.6851,1364.6938,1365.7026,1366.7122,1367.7209,1368.7297,1369.7385,1370.7473,1371.7568,1372.7659,1373.7747,1374.7834,1375.7930,1376.8015,1377.8103,1378.8193,1379.8291,1380.8376,1381.8472,1382.8560,1383.8647,1384.8738,1385.8823,1386.8918,1387.9006,1388.9094,1389.9182,1390.9270,1391.9365,1392.9453,1393.9541,1394.9629,1395.9717,1396.9814,1397.9902,1398.9990,1400.0076,1401.0164,1402.0251,1403.0349,1404.0437,1405.0522,1406.0610,1407.0706,1408.0786,1409.0874,1410.0972,1411.1057,1412.1145,1413.1233,1414.1321,1415.1409,1416.1504,1417.1592,1418.1680,1419.1768,1420.1855,1421.1941,1422.2029,1423.2117,1424.2205,1425.2292,1426.2390,1427.2476,1428.2563,1429.2651,1430.2739,1431.2827,1432.2915,1433.3003,1434.3091,1435.3176,1436.3264,1437.3352,1438.3440,1439.3528,1440.3623,1441.3708,1442.3792,1443.3887,1444.3975,1445.4060,1446.4148,1447.4236,1448.4326,1449.4412,1450.4500,1451.4585,1452.4673,1453.4761,1454.4851,1455.4937,1456.5024,1457.5110,1458.5198,1459.5288,1460.5374,1461.5461,1462.5549,1463.5637,1464.5723,1465.5803,1466.5891,1467.5977,1468.6064,1469.6152,1470.6240,1471.6328,1472.6416,1473.6504,1474.6589,1475.6677,1476.6763,1477.6851,1478.6941,1479.7029,1480.7114,1481.7202,1482.7280,1483.7375,1484.7456,1485.7542,1486.7629,1487.7717,1488.7805,1489.7893,1490.7981,1491.8059,1492.8147,1493.8235,1494.8320,1495.8408,1496.8496,1497.8584,1498.8662,1499.8757,1500.8835,1501.8926,1502.9011,1503.9099,1504.9187,1505.9272,1506.9351,1507.9438,1508.9526,1509.9614,1510.9702,1511.9780,1512.9866,1513.9954,1515.0042,1516.0129,1517.0217,1518.0295,1519.0383,1520.0469,1521.0559,1522.0637,1523.0725,1524.0811,1525.0898,1526.0984,1527.1064,1528.1152,1529.1240,1530.1326,1531.1414,1532.1492,1533.1582,1534.1667,1535.1746,1536.1838,1537.1919,1538.2009,1539.2090,1540.2170,1541.2261,1542.2341,1543.2432,1544.2512,1545.2600,1546.2681,1547.2773,1548.2854,1549.2935,1550.3025,1551.3105,1552.3196,1553.3276,1554.3367,1555.3447,1556.3528,1557.3616,1558.3699,1559.3789,1560.3870,1561.3950,1562.4041,1563.4121,1564.4211,1565.4292,1566.4373,1567.4463,1568.4541,1569.4631,1570.4712,1571.4792,1572.4883,1573.4963,1574.5044,1575.5137,1576.5217,1577.5298,1578.5388,1579.5469,1580.5549,1581.5637,1582.5718,1583.5808,1584.5889,1585.5969,1586.6060,1587.6140,1588.6221,1589.6311,1590.6392,1591.6475,1592.6555,1593.6643,1594.6724,1595.6804,1596.6895,1597.6975,1598.7056,1599.7146,1600.7227,1601.7307,1602.7390,1603.7471,1604.7561,1605.7642,1606.7722,1607.7803,1608.7893,1609.7971,1610.8062,1611.8142,1612.8223,1613.8303,1614.8394,1615.8474,1616.8555,1617.8635,1618.8716,1619.8806,1620.8887,1621.8967,1622.9055,1623.9136,1624.9216,1625.9297,1626.9387,1627.9468,1628.9548,1629.9631,1630.9712,1631.9792,1632.9883,1633.9963,1635.0042,1636.0122,1637.0212,1638.0293,1639.0374,1640.0454,1641.0537,1642.0618,1643.0698,1644.0789,1645.0869,1646.0947,1647.1028,1648.1118,1649.1199,1650.1279,1651.1360,1652.1440,1653.1521,1654.1602,1655.1682,1656.1775,1657.1855,1658.1934,1659.2014,1660.2095,1661.2175,1662.2266,1663.2346,1664.2427,1665.2507,1666.2588,1667.2668,1668.2749,1669.2830,1670.2910,1671.3000,1672.3081,1673.3162,1674.3242,1675.3320,1676.3401,1677.3481,1678.3562,1679.3643,1680.3733,1681.3813,1682.3894,1683.3975,1684.4058,1685.4138,1686.4219,1687.4297,1688.4377,1689.4458,1690.4539,1691.4619,1692.4700,1693.4780,1694.4861,1695.4941,1696.5022,1697.5103,1698.5183,1699.5273,1700.5354,1701.5435,1702.5515,1703.5596,1704.5676,1705.5757,1706.5837,1707.5918,1708.5999,1709.6079,1710.6160,1711.6240,1712.6318,1713.6399,1714.6479,1715.6560,1716.6641,1717.6721,1718.6802,1719.6882,1720.6963,1721.7043,1722.7124,1723.7205,1724.7283,1725.7363,1726.7444,1727.7527,1728.7607,1729.7688,1730.7769,1731.7849,1732.7930,1733.8010,1734.8081,1735.8169,1736.8250,1737.8330,1738.8401,1739.8481,1740.8562,1741.8643,1742.8723,1743.8804,1744.8884,1745.8965,1746.9045,1747.9124,1748.9204,1749.9285,1750.9365,1751.9446,1752.9526,1753.9607,1754.9678,1755.9758,1756.9839,1757.9919,1759.0000,1760.0081,1761.0159,1762.0239,1763.0320,1764.0400,1765.0474,1766.0554,1767.0635,1768.0715,1769.0796,1770.0876,1771.0947,1772.1028,1773.1106,1774.1187,1775.1267,1776.1348,1777.1428,1778.1509,1779.1589,1780.1660,1781.1741,1782.1821,1783.1902,1784.1982,1785.2061,1786.2141,1787.2212,1788.2292,1789.2373,1790.2454,1791.2534,1792.2615,1793.2686,1794.2766,1795.2847,1796.2927,1797.3008,1798.3086,1799.3157,1800.3237,1801.3318,1802.3401,1803.3469,1804.3550,1805.3630,1806.3711,1807.3784,1808.3865,1809.3943,1810.4023,1811.4104,1812.4185,1813.4255,1814.4336,1815.4417,1816.4497,1817.4568,1818.4648,1819.4729,1820.4810,1821.4888,1822.4958,1823.5039,1824.5120,1825.5200,1826.5271,1827.5352,1828.5432,1829.5513,1830.5583,1831.5664,1832.5745,1833.5815,1834.5894,1835.5974,1836.6055,1837.6135,1838.6206,1839.6287,1840.6367,1841.6438,1842.6519,1843.6599,1844.6680,1845.6750,1846.6829,1847.6909,1848.6990,1849.7063,1850.7144,1851.7212,1852.7292,1853.7373,1854.7446,1855.7527,1856.7607,1857.7678,1858.7756,1859.7837,1860.7917,1861.7988,1862.8069,1863.8149,1864.8220,1865.8301,1866.8381,1867.8452,1868.8533,1869.8604,1870.8682,1871.8762,1872.8843,1873.8914,1874.8994,1875.9075,1876.9146,1877.9226,1878.9297,1879.9377,1880.9458,1881.9529,1882.9609,1883.9688,1884.9758,1885.9839,1886.9919,1887.9990,1889.0071,1890.0142,1891.0222,1892.0303,1893.0374,1894.0454,1895.0525,1896.0603,1897.0684,1898.0754,1899.0835,1900.0916,1901.0986,1902.1067,1903.1138,1904.1218,1905.1289,1906.1370,1907.1450,1908.1519,1909.1599,1910.1670,1911.1750,1912.1831,1913.1902,1914.1982,1915.2053,1916.2134,1917.2205,1918.2285,1919.2356,1920.2434,1921.2515,1922.2585,1923.2666,1924.2737,1925.2817,1926.2888,1927.2969,1928.3040,1929.3120,1930.3191,1931.3271,1932.3342,1933.3423,1934.3503,1935.3574,1936.3652,1937.3723,1938.3804,1939.3875,1940.3955,1941.4026,1942.4106,1943.4177,1944.4258,1945.4329,1946.4409,1947.4480,1948.4561,1949.4631,1950.4712,1951.4780,1952.4861,1953.4932,1954.5012,1955.5078,1956.5159,1957.5239,1958.5320,1959.5381,1960.5461,1961.5540,1962.5620,1963.5681,1964.5762,1965.5842,1966.5923,1967.5984,1968.6064,1969.6145,1970.6206,1971.6287,1972.6367,1973.6445,1974.6506,1975.6587,1976.6667,1977.6748,1978.6809,1979.6890,1980.6970,1981.7031,1982.7112,1983.7192,1984.7266,1985.7332,1986.7412,1987.7493,1988.7554,1989.7639,1990.7710,1991.7776,1992.7856,1993.7937,1994.8018,1995.8079,1996.8159,1997.8240,1998.8301,1999.8381,2000.8457,2001.8540,2002.8601,2003.8682,2004.8762,2005.8828,2006.8899,2007.8979,2008.9048,2009.9126,2010.9207,2011.9272,2012.9353,2013.9421,2014.9507,2015.9568,2016.9648,2017.9729,2018.9795,2019.9871,2020.9951,2022.0012,2023.0093,2024.0173,2025.0234,2026.0312,2027.0393,2028.0454,2029.0535]
    chi = chi / float(dof)

    wbest = np.unravel_index(np.argmin(chi, axis=None), chi.shape) #index of the minimum chi-square: this is the best-fitting solution
    minchi = np.amin(chi)   # minimum chi-square value
    deltachi = cvf[dof-1]/float(dof)
    wdchi = (chi<=minchi + deltachi).nonzero()
    resmodB = [modB[wbest],np.amin(modB[wdchi]),np.amax(modB[wdchi])]
    return (resmodB,wbest)

def magnotron_loadff(file='ff0xx.p'):
    ff = pickle.load( open( file, "rb" ) )
    return(ff)

def magnotron_chisqr(inputsynth,inputobs,snr):
    chisquare = np.square(inputsynth[:]-inputobs[:])*np.square(snr)
    chisquare= np.sum(chisquare)
    return chisquare

def magnotron_findscale(synth,obs,scale_array,snr):
    best_chi = magnotron_chisqr(synth,obs,snr)  #   first value for the chisquare - without scaling
    best_scale = -1
    for scale in scale_array:   # looping on scaling factor array
        chi = magnotron_chisqr(synth * scale +1. - scale, obs, snr) #computing the chi square
        if (chi <= best_chi):   # if chi square is improved
            best_chi = chi  # storing the chi square
            best_scale = scale  # storing the scaling factor
    return (best_scale, best_chi)

# The OBSPATH (path to the observed spectrum file) can point to several files, separated by ':'
# magnotron_split_obspath takes the OBSPATH in input, splits the thing, and returns an array
def magnotron_split_obspath(obspath):
    splitobspath = obspath.split("+")
    return splitobspath

# MAGNOTRON_OBSREAD opens the array of inputfile (2 column ascii text file) and
# puts the wavelength and spectrum into the array obs
def magnotron_obsread(inputfile):
    ii = 0  # initializes counter
    for file in inputfile:  # loops over the inputfile array
        my_path = os.path.abspath(os.path.dirname(__file__))
        filepath = os.path.join(my_path, file)
        filepath = filepath.strip()
        if os.path.exists(filepath) != True:    #checking that the file is present
            print("[error] magnotron_obsread(): The spectrum file is not found at {}".format(filepath))  #if not, print an error message
            print(os.path.exists(filepath))
            sys.exit(5) # and exit the program

        if ii == 0: # if first file then create the obs array
            obs = np.loadtxt(file, unpack=True) # unpacks the file into obs
            ii += 1 # increments counter
        else:   # if not first file, unpacks file into buffer
            buff = np.loadtxt(filepath, unpack=True)
            buff = buff.reshape((2,-1))
            obs = np.concatenate((obs,buff),axis=1) # and concatenate buffer into already existing obs
            ii += 1
    return obs

# MAGNOTRON_WL_WELECT takes into input the 1D array of synthetic wavelength, and the wave_min wave_max array
# returned from magnotron_get_line. It returns the subset of wavlength point inside the wavelength regions
def magnotron_wl_select(synth,wl):
    for i in range(len(wl[0,:])):   # loop over the different wavelength regions
        if i == 0:
            wls = np.argwhere((synth >= wl[0,i]) & (synth <= wl[1,i]))
        else:
            buff = np.argwhere((synth >= wl[0,i]) & (synth <= wl[1,i]))
            wls = np.concatenate((wls,buff),axis=0)
    return(wls)

# this routine makes sure that the 2d array synth and obs are interpolated on the same support (wavelength grid)
# in practice the synthetic spectrum is interpolated on the obs spectrum.
def magnotron_equal_support(synth,obs):
    from scipy import interpolate
    from scipy.interpolate import interp1d
    minsynth = np.amin(synth[0,:])  # min wavelength of synthetic spectrum
    maxsynth = np.amax(synth[0,:])  # max wavelength of synthetic spectrum
    minobs = np.amin(obs[0,:])  # min wavelength of observed spectrum
    maxobs = np.amax(obs[0,:])  # max wavelength of observed spectrum
    minglob = np.amax([minsynth,minobs])    # finds the minimum of the shared wavelength domain between synth and obs
    maxglob = np.amin([maxsynth,maxobs])    # finds the maximum of the shared wavelength domain between synth and obs
    w_s = np.argwhere((synth[0,:] >= minglob) & (synth[0,:] <= maxglob))    # indices of the shared wavelength domain in the synth file
    w_s.sort()  # sorts it
    fs = interpolate.splrep(synth[0,w_s],synth[1,w_s],s=0)  # spline interpolation of the synthetic spectrum
    w_obs = np.argwhere((obs[0,:] >= minglob) & (obs[0,:] <= maxglob))  # indices of the shared wavelength domain in the obs file
    w_obs.sort()    # sorts it
    y_obs = obs[1,w_obs]
    x_obs = obs[0,w_obs]
    y_synth = interpolate.splev(x_obs, fs, der=0)   # interpolates the synth with the observed spectrum wavelength grid
    output = np.stack((x_obs,y_obs,y_synth))
    output = output.reshape([3,-1])
    return(output)

def magnotron_readcsv(link):
    response = requests.get(link)
    with open("input.csv", "wb") as text_file:
        text_file.write(response.content)
    df = pd.read_csv('input.csv', dtype={'uuid': object, 'star': object, 'vsini': np.float64, 'snr':np.float64, 'rv': np.float64, 'instr': np.float64, 'obspath': object,'logg': object ,'teff': object,'moutpath': object, 'wlmin': object, 'wlmax': object, 'rowid':np.float64})
    return(df)

def magnotron_clean(files):
    for f in files:
        if os.path.exists(f):
            os.remove(f)
    return(0)

# MAGNOTRON_SYNTHREAD reads the .prf files outputted from the s3div.Linux program. These are the disk-integrated and vsini-vmacro-instr broadened synthetic spectra
def magnotron_synthread(file):
    my_path = os.path.abspath(os.path.dirname(__file__))
    filepath = os.path.join(my_path, file)
    filepath = filepath.strip()
    if os.path.isfile(filepath) != True:    #checking that the file is present
        print("[error] magnotron_synthread(): The synthetic spectrum file is not found at {}".format(filepath))  #if not, print an error message
        sys.exit(1) # and exit the program

    with open(filepath) as f:   #opens the file
        first_line = f.readline()   # reads the first line which is a string containing a number of lines (to skip),  '-' and some text
        a = first_line.split('-')   # splits the first line using '-' as a delimiter, in order to get extract the number of lines to skip
        nl = int(a[0])  # converts the number of lines to skip into integer
        s = np.genfromtxt(filepath,skip_header=nl+2,skip_footer=2,unpack=True)  # skips nl + 2 lines to get to the spectrum. skips the last 2 lines which are text
    return(s)   # returns the 2D array [wave,spectrum]

# CRUNCH1 is optionally called at the beginning of the main routine
# It goes through the input parameters database, isolates a unique
# combination of stellar parameters, and computes a synthethic
# stellar spectra for each combination of stellar parameters, and
# for the given magnetic field array. It saves the resulting
# stellar templates in a HDF5 file that can be used by CRUNCH2
#-------------------------------------------------------------
def crunch1(inputpar,synthpath,mf,output="synth-spectra-1.h5"):
    f = h5py.File(output, "w")    # opens a HDF5 file
    stellar_par = inputpar[['vsini','logg','teff']].drop_duplicates()   # selects the unique combination of stellar parameters vsini / teff / log(g)
    n_stellar_par = len(stellar_par.logg)   # counts such unique combinations
    print("[info] preparing the grid of magnetic synthetic spectra")
    print("[info] synthpath: {}".format(synthpath))
    print("[info] the unique set of stellar parameters is:")
    print("-------------------------")
    print(stellar_par)
    print("-------------------------")
    nmf = len(mf)
    # Now looping on the different parameter combinations
    for ipar in stellar_par.index:
        for imf in range(len(mf)):  # looping on the different magnetic field strength selected
            str_mf = '%04.1f' % mf[imf]     # converting the mf value to a flot such as 10.0, or 07.2 (4 characters including decimal point)
            string = 't'+stellar_par.loc[ipar,'teff']+'g'+stellar_par.loc[ipar,'logg']+'*'
            string += str_mf +'*.mout'
            if not (glob.glob(synthpath+string)):   # checking if there is a synthetic spectra with the right filename
                print("ERROR: FILE NOT FOUND {}".format(string))
                sys.exit(1) # and exit the program

            vsini = inputpar.loc[ipar,('vsini')]      # getting vsini from input parameters
            instr = inputpar.loc[ipar,('instr')]      # and the spectral resolution
            str_vsini = '%05.2f' % vsini  # converts vsini to a string
            str_instr = '%.1f' % instr # converts spectral resolution to a string

            synthfile = glob.glob(synthpath+string)    # filepath to the magnetic synthetic spectrum
            cs2= 's3div.Linux '+synthfile[0] + ' s.prf ' + str_vsini + ' 0. 1000000. ' +str_instr    # command-line to apply different broadenings to the synthetic spectrum
            os.popen(cs2).read()    # running the command and saving the convolved spectrum into a file
            tsynth = magnotron_synthread('s.prf')
            if imf == 0:
                nsp = len(tsynth[0,:])  # number of points in the spectrum
                synth = np.zeros([nmf,2,nsp]) # creates an array to store the magnetic synthetic spectra
            synth[imf,:,:] = tsynth
            cs2 = 'rm s.prf'
            os.popen(cs2).read()
            status = 0
            print("crunching | vsini = {} km/s | log(g)= {} | t_eff = {} K| <B> = {} kG".format(str_vsini,stellar_par.loc[ipar,'logg'],stellar_par.loc[ipar,'teff'], str_mf))
        datasetname = 'dataset'+str_vsini+'_g'+stellar_par.loc[ipar,'logg']+'_'+stellar_par.loc[ipar,'teff']
        print("datasetname: {}".format(datasetname))
        f.create_dataset(datasetname, data=synth, dtype=np.float64)
        print("saving the synthetic spectrum in the dataset: {}".format(datasetname))
    f.close()
    # end of loop
    #
    return 0
# END OF CRUNCH1
#---------------

# CRUNCH2 takes the input parameter database as input. It loads the output
# file generated by CRUNCH1. For each observed spectra, it will interpolate
# the relevant synthetic spectra onto the same wavelength base.
# The synth array containing the spectra is returned into a dataset
# within the output HDF5 file.
#-----------------------------
def crunch2(inputpar,input="synth-spectra-1.h5", output="synth-spectra-2.h5"):
    f2 = h5py.File(output, "w")    # opens a HDF5 file
    with h5py.File(input,'r') as hf1:
        for iobs in inputpar.index:
            obspath = magnotron_split_obspath(inputpar.loc[iobs,('obspath')])
            obs = magnotron_obsread(obspath)  # reading in the observed spectrum: 2D array with (1) wave (2) normalized intensity
            vsini = inputpar.loc[iobs,('vsini')]      # getting vsini from input parameters
            instr = inputpar.loc[iobs,('instr')]      # and the spectral resolution
            str_vsini = '%05.2f' % vsini  # converts vsini to a string
            dsname = 'dataset'+str_vsini+'_g'+inputpar.loc[iobs,'logg']+'_'+inputpar.loc[iobs,'teff']
            synth = hf1.get(dsname)
            ns = synth.shape[0]
            for imf in range(ns):
                sp_int = magnotron_equal_support(np.squeeze(synth[imf,:,:]),obs)
                if imf == 0:
                    sp = np.zeros([ns,3,len(sp_int[0,:])])
                sp[imf,:,:] = sp_int
            dsname2 = inputpar.loc[iobs,'uuid']
            f2.create_dataset(dsname2, data=sp, dtype=np.float64)
    f2.close()
    return 0
# END OF CRUNCH2
#---------------
